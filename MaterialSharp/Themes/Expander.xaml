<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
      xmlns:l="clr-namespace:MaterialSharp"
      xmlns:controls="clr-namespace:MaterialSharp.Controls"
      xmlns:converters="clr-namespace:MaterialSharp.Converters">

    <converters:MultipleMath x:Key="MultipleMathConverter" Operation="Multiply" />

    <ControlTemplate x:Key="Arrow" >
            <Path Data="M7.41,8.58L12,13.17L16.59,8.58L18,10L12,16L6,10L7.41,8.58Z"
                  Stretch="None" Margin="-4 -4 0 0" Fill="{DynamicResource ExpanderToggleColor}" />
    </ControlTemplate>

    <Style x:Key="MExpanderToggleButton" TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Background="Transparent">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CheckStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition From="Unchecked" To="Checked">
                                        <VisualTransition.GeneratedEasingFunction>
                                            <QuarticEase EasingMode="EaseOut"/>
                                        </VisualTransition.GeneratedEasingFunction>
                                        <Storyboard>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="ExpandPath">
                                                <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="-180"/>
                                            </DoubleAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualTransition>
                                    <VisualTransition GeneratedDuration="0" To="Unchecked">
                                        <Storyboard>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="ExpandPath">
                                                <EasingDoubleKeyFrame KeyTime="0" Value="-180"/>
                                            </DoubleAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualTransition>
                                    <VisualTransition GeneratedDuration="0" To="Checked">
                                        <Storyboard>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="ExpandPath">
                                                <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                            </DoubleAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualTransition>
                                    <VisualTransition From="Checked" GeneratedDuration="0" To="Unchecked">
                                        <VisualTransition.GeneratedEasingFunction>
                                            <QuarticEase EasingMode="EaseOut"/>
                                        </VisualTransition.GeneratedEasingFunction>
                                        <Storyboard>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="ExpandPath">
                                                <EasingDoubleKeyFrame KeyTime="0" Value="-180"/>
                                                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0"/>
                                            </DoubleAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualTransition>
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Checked">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="ExpandPath">
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="-180"/>
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Unchecked">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="ExpandPath">
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0"/>
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Button Template="{StaticResource Arrow}" x:Name="ExpandPath" RenderTransformOrigin="0.5,0.5" IsHitTestVisible="False">
                            <Button.RenderTransform>
                                <TransformGroup>
                                    <ScaleTransform/>
                                    <SkewTransform/>
                                    <RotateTransform />
                                    <TranslateTransform/>
                                </TransformGroup>
                            </Button.RenderTransform>
                        </Button>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MExpanderRightHeaderStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Background="{TemplateBinding Background}" Padding="14,14,14,14">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition />
                            </Grid.RowDefinitions>
                            <ToggleButton Grid.Row="0"
                                      HorizontalAlignment="Center"
                                      Foreground="{TemplateBinding Foreground}"
                                      IsChecked="{Binding Path=IsChecked, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                      Style="{StaticResource MExpanderToggleButton}"
                                      RenderTransformOrigin="0.5,0.5">
                                <ToggleButton.RenderTransform>
                                    <RotateTransform Angle="-90"/>
                                </ToggleButton.RenderTransform>
                            </ToggleButton>
                            <ContentPresenter Grid.Row="1"
                                          HorizontalAlignment="Center"
                                          Margin="0,16,0,0"
                                          Content="{TemplateBinding Content}" VerticalAlignment="Top" />
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MExpanderLeftHeaderStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="HorizontalAlignment" Value="Right" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Background="{TemplateBinding Background}" Padding="14,14,14,14">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition />
                            </Grid.RowDefinitions>
                            <ToggleButton Grid.Row="0"
                                      HorizontalAlignment="Center"
                                      Foreground="{TemplateBinding Foreground}"
                                      IsChecked="{Binding Path=IsChecked, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                      Style="{StaticResource MExpanderToggleButton}"
                                      RenderTransformOrigin="0.5,0.5">
                                <ToggleButton.RenderTransform>
                                    <RotateTransform Angle="90"/>
                                </ToggleButton.RenderTransform>
                            </ToggleButton>
                            <ContentPresenter Grid.Row="1"
                                          HorizontalAlignment="Center"
                                          Margin="0,16,0,0"
                                          Content="{TemplateBinding Content}" VerticalAlignment="Top" />
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MExpanderDownHeaderStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Background="{TemplateBinding Background}" Padding="14,14,14,14">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition />
                                <ColumnDefinition Width="Auto"/>
                            </Grid.ColumnDefinitions>
                            <ContentPresenter Content="{TemplateBinding Content}"
                                              ContentTemplate="{TemplateBinding ContentTemplate}"
                                              ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                              ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                                              VerticalAlignment="Center"
                                              Margin="0,0,16,0" />
                            <ToggleButton Grid.Column="1"
                                          VerticalAlignment="Center"
                                          Foreground="{TemplateBinding Foreground}"
                                          IsChecked="{Binding Path=IsChecked, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                          Style="{StaticResource MExpanderToggleButton}"/>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MExpanderUpHeaderStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Background="{TemplateBinding Background}" Padding="14,14,14,14">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition />
                                <ColumnDefinition Width="Auto"/>
                            </Grid.ColumnDefinitions>
                            <ContentPresenter VerticalAlignment="Center"
                                          Content="{TemplateBinding Content}"
                                          Margin="0,0,16,0" />
                            <ToggleButton IsChecked="{Binding Path=IsChecked, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                          VerticalAlignment="Center"
                                          Foreground="{TemplateBinding Foreground}"
                                          Style="{StaticResource MExpanderToggleButton}"
                                          RenderTransformOrigin="0.5,0.5"
                                          Grid.Column="1">
                                <ToggleButton.RenderTransform>
                                    <RotateTransform Angle="-180"/>
                                </ToggleButton.RenderTransform>
                            </ToggleButton>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MExpander" TargetType="{x:Type Expander}">
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Background" Value="{DynamicResource ExpanderBackground}" />
        <Setter Property="Foreground" Value="{DynamicResource ExpanderForeground}"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Top"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Expander}">
                    <Border BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="ExpansionStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0" To="Expanded">
                                        <VisualTransition.GeneratedEasingFunction>
                                            <CubicEase EasingMode="EaseOut"/>
                                        </VisualTransition.GeneratedEasingFunction>
                                        <Storyboard>
                                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PART_Content" Storyboard.TargetProperty="Visibility">
                                                <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}" />
                                            </ObjectAnimationUsingKeyFrames>
                                            <DoubleAnimation Storyboard.TargetProperty="Opacity" Storyboard.TargetName="PART_Content" To="1" Duration="0:0:0.3"/>
                                        </Storyboard>
                                    </VisualTransition>
                                    <VisualTransition GeneratedDuration="0" To="Collapsed">
                                        <VisualTransition.GeneratedEasingFunction>
                                            <CubicEase EasingMode="EaseOut"/>
                                        </VisualTransition.GeneratedEasingFunction>
                                        <Storyboard>
                                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PART_Content" Storyboard.TargetProperty="Visibility">
                                                <DiscreteObjectKeyFrame KeyTime="0:0:0.3" Value="{x:Static Visibility.Collapsed}" />
                                            </ObjectAnimationUsingKeyFrames>
                                            <DoubleAnimation Storyboard.TargetProperty="Opacity" Storyboard.TargetName="PART_Content" To="0" Duration="0:0:0.3"/>
                                        </Storyboard>
                                    </VisualTransition>
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Expanded">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetProperty="Opacity" Storyboard.TargetName="PART_Content" To="1" Duration="0"/>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PART_Content" Storyboard.TargetProperty="Visibility">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Collapsed">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetProperty="Opacity" Storyboard.TargetName="PART_Content" To="0" Duration="0"/>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PART_Content" Storyboard.TargetProperty="Visibility">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Hidden}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <DockPanel Background="{TemplateBinding Background}">
                            <ToggleButton Name="HeaderSite" Background="{DynamicResource ExpanderHeaderColor}"
                                          Focusable="False"
                                          IsTabStop="False"
                                              DockPanel.Dock="Top"
                                              BorderThickness="0" Cursor="Hand"
                                              IsChecked="{Binding Path=IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                              Style="{StaticResource MExpanderDownHeaderStyle}"
                                              TextElement.FontSize="15"
                                              Opacity=".87"
                                              Foreground="{TemplateBinding Foreground}"
                                              Content="{TemplateBinding Header}"
                                              ContentTemplate="{TemplateBinding HeaderTemplate}"
                                              ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}"
                                              ContentStringFormat="{TemplateBinding HeaderStringFormat}"/>
                            <Border Name="ContentSite" DockPanel.Dock="Bottom" Background="{DynamicResource ExpanderContentColor}">
                                <StackPanel Name="ContentPanel" 
                                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                Margin="{TemplateBinding Padding}" 
                                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                    <StackPanel.Height>
                                        <MultiBinding Converter="{StaticResource MultipleMathConverter}">
                                            <Binding ElementName="PART_Content" Path="ActualHeight"/>
                                            <Binding ElementName="PART_Content" Path="Opacity"/>
                                        </MultiBinding>
                                    </StackPanel.Height>
                                    <StackPanel.Width>
                                        <MultiBinding Converter="{StaticResource MultipleMathConverter}">
                                            <Binding ElementName="PART_Content" Path="ActualWidth"/>
                                            <Binding ElementName="PART_Content" Path="Opacity"/>
                                        </MultiBinding>
                                    </StackPanel.Width>
                                    <ContentPresenter Name="PART_Content" Focusable="False"
                                                          ContentTemplate="{TemplateBinding ContentTemplate}"
                                                          ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                                          ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"/>
                                </StackPanel>
                            </Border>
                        </DockPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="ExpandDirection" Value="Right">
                            <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Left"/>
                            <Setter Property="DockPanel.Dock" TargetName="ContentSite" Value="Right"/>
                            <Setter Property="Orientation" TargetName="ContentPanel" Value="Horizontal"/>
                            <Setter Property="Height" TargetName="ContentPanel" Value="Auto"/>
                            <Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource MExpanderRightHeaderStyle}"/>
                        </Trigger>

                        <Trigger Property="ExpandDirection" Value="Left">
                            <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Right"/>
                            <Setter Property="DockPanel.Dock" TargetName="ContentSite" Value="Left"/>
                            <Setter Property="Orientation" TargetName="ContentPanel" Value="Horizontal"/>
                            <Setter Property="Height" TargetName="ContentPanel" Value="Auto"/>
                            <Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource MExpanderLeftHeaderStyle}"/>
                        </Trigger>

                        <Trigger Property="ExpandDirection" Value="Up">
                            <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Bottom"/>
                            <Setter Property="DockPanel.Dock" TargetName="ContentSite" Value="Top"/>
                            <Setter Property="Orientation" TargetName="ContentPanel" Value="Vertical"/>
                            <Setter Property="Width" TargetName="ContentPanel" Value="Auto"/>
                            <Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource MExpanderUpHeaderStyle}"/>
                        </Trigger>

                        <Trigger Property="ExpandDirection" Value="Down">
                            <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Top"/>
                            <Setter Property="DockPanel.Dock" TargetName="ContentSite" Value="Bottom"/>
                            <Setter Property="Orientation" TargetName="ContentPanel" Value="Vertical"/>
                            <Setter Property="Width" TargetName="ContentPanel" Value="Auto"/>
                            <Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource MExpanderDownHeaderStyle}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>